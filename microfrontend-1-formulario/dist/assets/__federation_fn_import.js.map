{"version":3,"file":"__federation_fn_import.js","sources":["../../../node_modules/@originjs/vite-plugin-federation/dist/satisfy.mjs"],"sourcesContent":["const buildIdentifier = \"[0-9A-Za-z-]+\";\nconst build = `(?:\\\\+(${buildIdentifier}(?:\\\\.${buildIdentifier})*))`;\nconst numericIdentifier = \"0|[1-9]\\\\d*\";\nconst numericIdentifierLoose = \"[0-9]+\";\nconst nonNumericIdentifier = \"\\\\d*[a-zA-Z-][a-zA-Z0-9-]*\";\nconst preReleaseIdentifierLoose = `(?:${numericIdentifierLoose}|${nonNumericIdentifier})`;\nconst preReleaseLoose = `(?:-?(${preReleaseIdentifierLoose}(?:\\\\.${preReleaseIdentifierLoose})*))`;\nconst preReleaseIdentifier = `(?:${numericIdentifier}|${nonNumericIdentifier})`;\nconst preRelease = `(?:-(${preReleaseIdentifier}(?:\\\\.${preReleaseIdentifier})*))`;\nconst xRangeIdentifier = `${numericIdentifier}|x|X|\\\\*`;\nconst xRangePlain = `[v=\\\\s]*(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:${preRelease})?${build}?)?)?`;\nconst hyphenRange = `^\\\\s*(${xRangePlain})\\\\s+-\\\\s+(${xRangePlain})\\\\s*$`;\nconst mainVersionLoose = `(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})`;\nconst loosePlain = `[v=\\\\s]*${mainVersionLoose}${preReleaseLoose}?${build}?`;\nconst gtlt = \"((?:<|>)?=?)\";\nconst comparatorTrim = `(\\\\s*)${gtlt}\\\\s*(${loosePlain}|${xRangePlain})`;\nconst loneTilde = \"(?:~>?)\";\nconst tildeTrim = `(\\\\s*)${loneTilde}\\\\s+`;\nconst loneCaret = \"(?:\\\\^)\";\nconst caretTrim = `(\\\\s*)${loneCaret}\\\\s+`;\nconst star = \"(<|>)?=?\\\\s*\\\\*\";\nconst caret = `^${loneCaret}${xRangePlain}$`;\nconst mainVersion = `(${numericIdentifier})\\\\.(${numericIdentifier})\\\\.(${numericIdentifier})`;\nconst fullPlain = `v?${mainVersion}${preRelease}?${build}?`;\nconst tilde = `^${loneTilde}${xRangePlain}$`;\nconst xRange = `^${gtlt}\\\\s*${xRangePlain}$`;\nconst comparator = `^${gtlt}\\\\s*(${fullPlain})$|^$`;\nconst gte0 = \"^\\\\s*>=\\\\s*0.0.0\\\\s*$\";\nfunction parseRegex(source) {\n  return new RegExp(source);\n}\nfunction isXVersion(version) {\n  return !version || version.toLowerCase() === \"x\" || version === \"*\";\n}\nfunction pipe(...fns) {\n  return (x) => {\n    return fns.reduce((v, f) => f(v), x);\n  };\n}\nfunction extractComparator(comparatorString) {\n  return comparatorString.match(parseRegex(comparator));\n}\nfunction combineVersion(major, minor, patch, preRelease2) {\n  const mainVersion2 = `${major}.${minor}.${patch}`;\n  if (preRelease2) {\n    return `${mainVersion2}-${preRelease2}`;\n  }\n  return mainVersion2;\n}\nfunction parseHyphen(range) {\n  return range.replace(\n    parseRegex(hyphenRange),\n    (_range, from, fromMajor, fromMinor, fromPatch, _fromPreRelease, _fromBuild, to, toMajor, toMinor, toPatch, toPreRelease) => {\n      if (isXVersion(fromMajor)) {\n        from = \"\";\n      } else if (isXVersion(fromMinor)) {\n        from = `>=${fromMajor}.0.0`;\n      } else if (isXVersion(fromPatch)) {\n        from = `>=${fromMajor}.${fromMinor}.0`;\n      } else {\n        from = `>=${from}`;\n      }\n      if (isXVersion(toMajor)) {\n        to = \"\";\n      } else if (isXVersion(toMinor)) {\n        to = `<${+toMajor + 1}.0.0-0`;\n      } else if (isXVersion(toPatch)) {\n        to = `<${toMajor}.${+toMinor + 1}.0-0`;\n      } else if (toPreRelease) {\n        to = `<=${toMajor}.${toMinor}.${toPatch}-${toPreRelease}`;\n      } else {\n        to = `<=${to}`;\n      }\n      return `${from} ${to}`.trim();\n    }\n  );\n}\nfunction parseComparatorTrim(range) {\n  return range.replace(parseRegex(comparatorTrim), \"$1$2$3\");\n}\nfunction parseTildeTrim(range) {\n  return range.replace(parseRegex(tildeTrim), \"$1~\");\n}\nfunction parseCaretTrim(range) {\n  return range.replace(parseRegex(caretTrim), \"$1^\");\n}\nfunction parseCarets(range) {\n  return range.trim().split(/\\s+/).map((rangeVersion) => {\n    return rangeVersion.replace(\n      parseRegex(caret),\n      (_, major, minor, patch, preRelease2) => {\n        if (isXVersion(major)) {\n          return \"\";\n        } else if (isXVersion(minor)) {\n          return `>=${major}.0.0 <${+major + 1}.0.0-0`;\n        } else if (isXVersion(patch)) {\n          if (major === \"0\") {\n            return `>=${major}.${minor}.0 <${major}.${+minor + 1}.0-0`;\n          } else {\n            return `>=${major}.${minor}.0 <${+major + 1}.0.0-0`;\n          }\n        } else if (preRelease2) {\n          if (major === \"0\") {\n            if (minor === \"0\") {\n              return `>=${major}.${minor}.${patch}-${preRelease2} <${major}.${minor}.${+patch + 1}-0`;\n            } else {\n              return `>=${major}.${minor}.${patch}-${preRelease2} <${major}.${+minor + 1}.0-0`;\n            }\n          } else {\n            return `>=${major}.${minor}.${patch}-${preRelease2} <${+major + 1}.0.0-0`;\n          }\n        } else {\n          if (major === \"0\") {\n            if (minor === \"0\") {\n              return `>=${major}.${minor}.${patch} <${major}.${minor}.${+patch + 1}-0`;\n            } else {\n              return `>=${major}.${minor}.${patch} <${major}.${+minor + 1}.0-0`;\n            }\n          }\n          return `>=${major}.${minor}.${patch} <${+major + 1}.0.0-0`;\n        }\n      }\n    );\n  }).join(\" \");\n}\nfunction parseTildes(range) {\n  return range.trim().split(/\\s+/).map((rangeVersion) => {\n    return rangeVersion.replace(\n      parseRegex(tilde),\n      (_, major, minor, patch, preRelease2) => {\n        if (isXVersion(major)) {\n          return \"\";\n        } else if (isXVersion(minor)) {\n          return `>=${major}.0.0 <${+major + 1}.0.0-0`;\n        } else if (isXVersion(patch)) {\n          return `>=${major}.${minor}.0 <${major}.${+minor + 1}.0-0`;\n        } else if (preRelease2) {\n          return `>=${major}.${minor}.${patch}-${preRelease2} <${major}.${+minor + 1}.0-0`;\n        }\n        return `>=${major}.${minor}.${patch} <${major}.${+minor + 1}.0-0`;\n      }\n    );\n  }).join(\" \");\n}\nfunction parseXRanges(range) {\n  return range.split(/\\s+/).map((rangeVersion) => {\n    return rangeVersion.trim().replace(\n      parseRegex(xRange),\n      (ret, gtlt2, major, minor, patch, preRelease2) => {\n        const isXMajor = isXVersion(major);\n        const isXMinor = isXMajor || isXVersion(minor);\n        const isXPatch = isXMinor || isXVersion(patch);\n        if (gtlt2 === \"=\" && isXPatch) {\n          gtlt2 = \"\";\n        }\n        preRelease2 = \"\";\n        if (isXMajor) {\n          if (gtlt2 === \">\" || gtlt2 === \"<\") {\n            return \"<0.0.0-0\";\n          } else {\n            return \"*\";\n          }\n        } else if (gtlt2 && isXPatch) {\n          if (isXMinor) {\n            minor = 0;\n          }\n          patch = 0;\n          if (gtlt2 === \">\") {\n            gtlt2 = \">=\";\n            if (isXMinor) {\n              major = +major + 1;\n              minor = 0;\n              patch = 0;\n            } else {\n              minor = +minor + 1;\n              patch = 0;\n            }\n          } else if (gtlt2 === \"<=\") {\n            gtlt2 = \"<\";\n            if (isXMinor) {\n              major = +major + 1;\n            } else {\n              minor = +minor + 1;\n            }\n          }\n          if (gtlt2 === \"<\") {\n            preRelease2 = \"-0\";\n          }\n          return `${gtlt2 + major}.${minor}.${patch}${preRelease2}`;\n        } else if (isXMinor) {\n          return `>=${major}.0.0${preRelease2} <${+major + 1}.0.0-0`;\n        } else if (isXPatch) {\n          return `>=${major}.${minor}.0${preRelease2} <${major}.${+minor + 1}.0-0`;\n        }\n        return ret;\n      }\n    );\n  }).join(\" \");\n}\nfunction parseStar(range) {\n  return range.trim().replace(parseRegex(star), \"\");\n}\nfunction parseGTE0(comparatorString) {\n  return comparatorString.trim().replace(parseRegex(gte0), \"\");\n}\nfunction compareAtom(rangeAtom, versionAtom) {\n  rangeAtom = +rangeAtom || rangeAtom;\n  versionAtom = +versionAtom || versionAtom;\n  if (rangeAtom > versionAtom) {\n    return 1;\n  }\n  if (rangeAtom === versionAtom) {\n    return 0;\n  }\n  return -1;\n}\nfunction comparePreRelease(rangeAtom, versionAtom) {\n  const { preRelease: rangePreRelease } = rangeAtom;\n  const { preRelease: versionPreRelease } = versionAtom;\n  if (rangePreRelease === void 0 && !!versionPreRelease) {\n    return 1;\n  }\n  if (!!rangePreRelease && versionPreRelease === void 0) {\n    return -1;\n  }\n  if (rangePreRelease === void 0 && versionPreRelease === void 0) {\n    return 0;\n  }\n  for (let i = 0, n = rangePreRelease.length; i <= n; i++) {\n    const rangeElement = rangePreRelease[i];\n    const versionElement = versionPreRelease[i];\n    if (rangeElement === versionElement) {\n      continue;\n    }\n    if (rangeElement === void 0 && versionElement === void 0) {\n      return 0;\n    }\n    if (!rangeElement) {\n      return 1;\n    }\n    if (!versionElement) {\n      return -1;\n    }\n    return compareAtom(rangeElement, versionElement);\n  }\n  return 0;\n}\nfunction compareVersion(rangeAtom, versionAtom) {\n  return compareAtom(rangeAtom.major, versionAtom.major) || compareAtom(rangeAtom.minor, versionAtom.minor) || compareAtom(rangeAtom.patch, versionAtom.patch) || comparePreRelease(rangeAtom, versionAtom);\n}\nfunction eq(rangeAtom, versionAtom) {\n  return rangeAtom.version === versionAtom.version;\n}\nfunction compare(rangeAtom, versionAtom) {\n  switch (rangeAtom.operator) {\n    case \"\":\n    case \"=\":\n      return eq(rangeAtom, versionAtom);\n    case \">\":\n      return compareVersion(rangeAtom, versionAtom) < 0;\n    case \">=\":\n      return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) < 0;\n    case \"<\":\n      return compareVersion(rangeAtom, versionAtom) > 0;\n    case \"<=\":\n      return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) > 0;\n    case void 0: {\n      return true;\n    }\n    default:\n      return false;\n  }\n}\nfunction parseComparatorString(range) {\n  return pipe(\n    parseCarets,\n    parseTildes,\n    parseXRanges,\n    parseStar\n  )(range);\n}\nfunction parseRange(range) {\n  return pipe(\n    parseHyphen,\n    parseComparatorTrim,\n    parseTildeTrim,\n    parseCaretTrim\n  )(range.trim()).split(/\\s+/).join(\" \");\n}\nfunction satisfy(version, range) {\n  if (!version) {\n    return false;\n  }\n  const parsedRange = parseRange(range);\n  const parsedComparator = parsedRange.split(\" \").map((rangeVersion) => parseComparatorString(rangeVersion)).join(\" \");\n  const comparators = parsedComparator.split(/\\s+/).map((comparator2) => parseGTE0(comparator2));\n  const extractedVersion = extractComparator(version);\n  if (!extractedVersion) {\n    return false;\n  }\n  const [\n    ,\n    versionOperator,\n    ,\n    versionMajor,\n    versionMinor,\n    versionPatch,\n    versionPreRelease\n  ] = extractedVersion;\n  const versionAtom = {\n    operator: versionOperator,\n    version: combineVersion(\n      versionMajor,\n      versionMinor,\n      versionPatch,\n      versionPreRelease\n    ),\n    major: versionMajor,\n    minor: versionMinor,\n    patch: versionPatch,\n    preRelease: versionPreRelease == null ? void 0 : versionPreRelease.split(\".\")\n  };\n  for (const comparator2 of comparators) {\n    const extractedComparator = extractComparator(comparator2);\n    if (!extractedComparator) {\n      return false;\n    }\n    const [\n      ,\n      rangeOperator,\n      ,\n      rangeMajor,\n      rangeMinor,\n      rangePatch,\n      rangePreRelease\n    ] = extractedComparator;\n    const rangeAtom = {\n      operator: rangeOperator,\n      version: combineVersion(\n        rangeMajor,\n        rangeMinor,\n        rangePatch,\n        rangePreRelease\n      ),\n      major: rangeMajor,\n      minor: rangeMinor,\n      patch: rangePatch,\n      preRelease: rangePreRelease == null ? void 0 : rangePreRelease.split(\".\")\n    };\n    if (!compare(rangeAtom, versionAtom)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport {\n  satisfy\n};\n"],"names":["buildIdentifier","build","numericIdentifier","numericIdentifierLoose","nonNumericIdentifier","preReleaseIdentifierLoose","preReleaseLoose","preReleaseIdentifier","preRelease","xRangeIdentifier","xRangePlain","hyphenRange","mainVersionLoose","loosePlain","gtlt","comparatorTrim","loneTilde","tildeTrim","loneCaret","caretTrim","star","caret","mainVersion","fullPlain","tilde","xRange","comparator","gte0","parseRegex","source","isXVersion","version","pipe","fns","x","v","f","extractComparator","comparatorString","combineVersion","major","minor","patch","preRelease2","mainVersion2","parseHyphen","range","_range","from","fromMajor","fromMinor","fromPatch","_fromPreRelease","_fromBuild","to","toMajor","toMinor","toPatch","toPreRelease","parseComparatorTrim","parseTildeTrim","parseCaretTrim","parseCarets","rangeVersion","_","parseTildes","parseXRanges","ret","gtlt2","isXMajor","isXMinor","isXPatch","parseStar","parseGTE0","compareAtom","rangeAtom","versionAtom","comparePreRelease","rangePreRelease","versionPreRelease","i","n","rangeElement","versionElement","compareVersion","eq","compare","parseComparatorString","parseRange","satisfy","comparators","comparator2","extractedVersion","versionOperator","versionMajor","versionMinor","versionPatch","extractedComparator","rangeOperator","rangeMajor","rangeMinor","rangePatch"],"mappings":"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","x_google_ignoreList":[0]}